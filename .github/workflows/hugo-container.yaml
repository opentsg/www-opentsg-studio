# GitHub Workflow for building and deploying a Hugo site to GitHub Pages
# needs secrets.DOCKER_USR - the account username for docker hub
# needs secrets.DOCKER_PAT - the account password for docker hub
# needs vars.DOCKER_NS - the account namespace for docker hub e.g. mrmxf
name: Build opentsg container for staging

on:
  # Runs on pushes targeting the default branch
  push:
    branches:
      - main
      - rc

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# global environment
env:
  IMAGE: www-opentsg-studio
  vHUGO: 0.136.5
  vNODE: 20.15
  # don't force a BASE_URL so that a container works for both
  # https://test.xxx/ and https://xxx/
  BASE_URL: ""
  # For maximum backward compatibility with Hugo modules
  HUGO_ENV: production

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages:    write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run
# in-progress and latest queued. However, do NOT cancel in-progress runs as we
# want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

# Default to bash
defaults:
  run:
    shell: bash

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
    steps:
      -
        name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0
      -
        name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version-file: '${{ github.workspace }}/go.mod'
      -
        name: Install Hugo CLI
        run: |
          wget -O \
             ${{ runner.temp }}/hugo.deb \
             https://github.com/gohugoio/hugo/releases/download/v${vHUGO}/hugo_extended_${vHUGO}_linux-amd64.deb \
             https://github.com/gohugoio/hugo/releases/download/v${vHUGO}/hugo_extended_${vHUGO}_linux-amd64.deb \
          && sudo dpkg -i ${{ runner.temp }}/hugo.deb
      -
        name: Install Dart Sass
        run: sudo snap install dart-sass
      -
        name: Install Node.js dependencies
        run: |
          if [[ -f package-lock.json || -f npm-shrinkwrap.json ]] ; then
            npm ci  || true
          else
            npm i || true
          fi
      -
        name: Setup ENV
        id:   setup_env
        run: |
          BRANCH=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}
          # preserve BRANCH for other steps & dependencies
          echo "BRANCH=$BRANCH" >> $GITHUB_ENV
          echo "export BRANCH=$BRANCH"  >> job-chain.sh

          PROJECT=$(basename $(pwd))
          # preserve PROJECT for other steps & dependencies
          echo "PROJECT=$PROJECT" >> $GITHUB_ENV
          echo "export PROJECT=$PROJECT"  >> job-chain.sh
      -
        name: Build with Hugo
        run: |
          # Hugo fails unexpectedly if the theme folder does not exist.
          mkdir -p themes/fohuw
          hugo mod get
          hugo --gc --minify --baseURL "$BASE_URL/"
      -
        name: Get website version
        run: |
              vCODE=$(cat data/releases.yaml | grep version | head -1 | grep -oE '[0-9]+\.[0-9]+\.[0-9]+')
              vCODE=$(cat data/releases.yaml | grep version | head -1 | grep -oE '[0-9]+\.[0-9]+\.[0-9]+')
              echo "pushing website version $vCODE"
              echo "export vCODE=$vCODE"  >> job-chain.sh
      -
        name: Check website version persists
        run: |
              echo "website version check is $vCODE"
      -
        name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name:  www-opentsg-studio
          path: |
                ./public
                Dockerfile
                job-chain.sh
          if-no-files-found: error
          retention-days:    1

  # Deployment job
  deploy:
    runs-on:     ubuntu-latest
    needs:       build
    steps:
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      -
        name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USR }}
          password: ${{ secrets.DOCKER_PAT }}
      -
        name: Restore artifact
        uses: actions/download-artifact@v4
        with:
          name:   www-opentsg-studio
      -
        name: Check website & set version
        run: |
              #create env from upstream dependencies
              source job-chain.sh
              echo "Deploying website version ($vCODE) from branch ($BRANCH)"
              echo "vCODE=$vCODE"     >> $GITHUB_ENV
              echo "BRANCH=$BRANCH"   >> $GITHUB_ENV
              echo "PROJECT=$PROJECT" >> $GITHUB_ENV
              echo "pushing to hub: ${{ vars.DOCKER_NS  }}/$PROJECT:$vCODE"
              ls -al ./public
              echo "--- Dockerfile -------------------------------------------"
              cat Dockerfile
      -
        name: Build and push - ARM
        uses: docker/build-push-action@v5
        with:
          # important that we use path context otherwise no output!
          context:   .
          push:      true
          tags: |
                "${{ vars.DOCKER_NS  }}/${{ env.IMAGE  }}-arm:${{ env.vCODE }}"
          platforms: linux/arm64
      -
        name: Build and push - AMD
        uses: docker/build-push-action@v5
        with:
          # important that we use path context otherwise no output!
          context:   .
          push:      true
          tags: |
                "${{ vars.DOCKER_NS  }}/${{ env.IMAGE  }}-amd:${{ env.vCODE }}"
          platforms: linux/amd64
